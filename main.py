import telebot
from telebot import types


BOT_TOKEN = "8365312991:AAGxY-g9KSXMxYy8EOB1vo2tVDx064VDZHM"
bot = telebot.TeleBot(BOT_TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}


@bot.message_handler(commands=['start'])
def start_dialog(message):
    chat_id = message.chat.id
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    user_data[chat_id] = {'step': 1}

    # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–õ–µ—Ç–æ", callback_data="summer")
    btn2 = types.InlineKeyboardButton("–ó–∏–º–∞", callback_data="winter")
    markup.add(btn1, btn2)

    bot.send_message(
        chat_id,
        "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ.\n\n"
        "üìå **–í–æ–ø—Ä–æ—Å 1 –∏–∑ 3:**\n"
        "–ö–∞–∫–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ?",
        reply_markup=markup,
        parse_mode='Markdown'
    )


@bot.callback_query_handler(func=lambda call: call.data == "restart")
def restart_dialog(call):
    chat_id = call.message.chat.id

    # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[chat_id] = {'step': 1}

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    bot.answer_callback_query(call.id, "–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ!")

    # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–õ–µ—Ç–æ", callback_data="summer")
    btn2 = types.InlineKeyboardButton("–ó–∏–º–∞", callback_data="winter")
    markup.add(btn1, btn2)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–≤—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
    bot.send_message(
        chat_id,
        "–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ üîÑ\n\n"
        "üìå **–í–æ–ø—Ä–æ—Å 1 –∏–∑ 3:**\n"
        "–ö–∞–∫–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ?",
        reply_markup=markup,
        parse_mode='Markdown'
    )


@bot.callback_query_handler(func=lambda call: call.data in ["summer", "winter", "cats", "dogs", "movies", "books"])
def handle_answers(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if chat_id not in user_data:
        user_data[chat_id] = {'step': 1}

    current_step = user_data[chat_id]['step']

    if current_step == 1:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        if call.data in ["summer", "winter"]:
            user_data[chat_id]['season'] = call.data
            user_data[chat_id]['step'] = 2

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
            season_map = {"summer": "–õ–µ—Ç–æ", "winter": "–ó–∏–º–∞"}
            bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω–æ: {season_map[call.data]}")

            # –í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å (–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            markup = types.InlineKeyboardMarkup()
            btn1 = types.InlineKeyboardButton("–ö–æ—à–∫–∏", callback_data="cats")
            btn2 = types.InlineKeyboardButton("–°–æ–±–∞–∫–∏", callback_data="dogs")
            markup.add(btn1, btn2)

            bot.send_message(
                chat_id,
                f"–û—Ç–ª–∏—á–Ω–æ! –¢—ã –≤—ã–±—Ä–∞–ª(–∞) {season_map[call.data]} üéâ\n\n"
                "üìå **–í–æ–ø—Ä–æ—Å 2 –∏–∑ 3:**\n"
                "–ö—Ç–æ —Ç–µ–±–µ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è?",
                reply_markup=markup,
                parse_mode='Markdown'
            )

    elif current_step == 2:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
        if call.data in ["cats", "dogs"]:
            user_data[chat_id]['animals'] = call.data
            user_data[chat_id]['step'] = 3

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
            animal_map = {"cats": "–ö–æ—à–∫–∏", "dogs": "–°–æ–±–∞–∫–∏"}
            bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω–æ: {animal_map[call.data]}")

            # –¢—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å (–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            markup = types.InlineKeyboardMarkup()
            btn1 = types.InlineKeyboardButton("–§–∏–ª—å–º—ã", callback_data="movies")
            btn2 = types.InlineKeyboardButton("–ö–Ω–∏–≥–∏", callback_data="books")
            markup.add(btn1, btn2)

            bot.send_message(
                chat_id,
                f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤—ã–±–æ—Ä! {animal_map[call.data]} - —ç—Ç–æ –∑–¥–æ—Ä–æ–≤–æ! üìù\n\n"
                "üìå **–í–æ–ø—Ä–æ—Å 3 –∏–∑ 3:**\n"
                "–ß—Ç–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?",
                reply_markup=markup,
                parse_mode='Markdown'
            )

    elif current_step == 3:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        if call.data in ["movies", "books"]:
            user_data[chat_id]['hobby'] = call.data

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
            hobby_map = {"movies": "–§–∏–ª—å–º—ã", "books": "–ö–Ω–∏–≥–∏"}
            bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω–æ: {hobby_map[call.data]}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            season_map = {"summer": "–õ–µ—Ç–æ", "winter": "–ó–∏–º–∞"}
            animal_map = {"cats": "–ö–æ—à–∫–∏", "dogs": "–°–æ–±–∞–∫–∏"}
            hobby_map = {"movies": "–§–∏–ª—å–º—ã", "books": "–ö–Ω–∏–≥–∏"}

            result_text = (
                "üéä **–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! –í–æ—Ç —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:**\n\n"
                f"üå§ **–í—Ä–µ–º—è –≥–æ–¥–∞:** {season_map[user_data[chat_id]['season']]}\n"
                f"üêæ **–ñ–∏–≤–æ—Ç–Ω—ã–µ:** {animal_map[user_data[chat_id]['animals']]}\n"
                f"üé≠ **–•–æ–±–±–∏:** {hobby_map[user_data[chat_id]['hobby']]}\n\n"
                "–ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ —Å —Ç–æ–±–æ–π –ø–æ–æ–±—â–∞—Ç—å—Å—è! üòä"
            )

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ
            markup = types.InlineKeyboardMarkup()
            restart_btn = types.InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")
            markup.add(restart_btn)

            bot.send_message(
                chat_id,
                result_text,
                reply_markup=markup,
                parse_mode='Markdown'
            )


@bot.message_handler(commands=['reset'])
def reset_dialog(message):
    chat_id = message.chat.id
    if chat_id in user_data:
        del user_data[chat_id]
    bot.send_message(chat_id, "–î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")


@bot.message_handler(commands=['my_data'])
def show_my_data(message):
    chat_id = message.chat.id
    if chat_id in user_data and user_data[chat_id].get('season'):
        season_map = {"summer": "–õ–µ—Ç–æ", "winter": "–ó–∏–º–∞"}
        animal_map = {"cats": "–ö–æ—à–∫–∏", "dogs": "–°–æ–±–∞–∫–∏"}
        hobby_map = {"movies": "–§–∏–ª—å–º—ã", "books": "–ö–Ω–∏–≥–∏"}

        data = user_data[chat_id]
        result_text = (
            "üìä **–¢–≤–æ–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:**\n\n"
            f"üå§ –í—Ä–µ–º—è –≥–æ–¥–∞: {season_map[data['season']]}\n"
            f"üêæ –ñ–∏–≤–æ—Ç–Ω—ã–µ: {animal_map[data.get('animals', '–ï—â–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª')]}\n"
            f"üé≠ –•–æ–±–±–∏: {hobby_map[data.get('hobby', '–ï—â–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª')]}"
        )
    else:
        result_text = "–£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥."

    bot.send_message(chat_id, result_text, parse_mode='Markdown')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_other_messages(message):
    chat_id = message.chat.id
    if chat_id in user_data and user_data[chat_id]['step'] > 1:
        bot.send_message(
            chat_id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. "
            "–ò–ª–∏ –Ω–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
        )
    else:
        bot.send_message(
            chat_id,
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–ø—Ä–æ—Å–∞. –ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥."
        )


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()